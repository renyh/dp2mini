        // 创建书目记录与册记录
        int CreateBiblioRecord(RestChannel channel,
            string strBiblioDbName,
            List<LocItem> locs,
            int biblioCount,
            int itemCountPerBiblio,
            out string strError)
        {
            strError = "";

            int barcordStart = 1;

            for (int i = 0; i < biblioCount; i++)
            {
                string strTitle = "测试题名" + (i + 1);

                MarcRecord record = new MarcRecord();
                record.add(new MarcField('$', "200  $a" + strTitle));
                record.add(new MarcField('$', "690  $aI247.5"));
                record.add(new MarcField('$', "701  $a测试著者"));
                string strMARC = record.Text;

                string strMarcSyntax = "unimarc";
                string strXml = "";
                int nRet = MarcUtil.Marc2Xml(strMARC,
                    strMarcSyntax,
                    out strXml,
                    out strError);
                if (nRet == -1)
                    return -1;

                string strPath = strBiblioDbName + "/?";
                byte[] baTimestamp = null;
                byte[] baNewTimestamp = null;
                string strOutputPath = "";


                SetBiblioInfoResponse response = channel.SetBiblioInfo(
                    // _stop,
                    "new",
                    strPath,
                    "xml",
                    strXml,
                    baTimestamp,
                    "",
                    "");//
                        //out strOutputPath,
                        //out baNewTimestamp,
                        //out strError);
                strOutputPath = response.strOutputBiblioRecPath;
                baNewTimestamp = response.baOutputTimestamp;
                if (response.SetBiblioInfoResult.Value == -1)
                {
                    strError = "保存书目记录 '" + strPath + "' 时出错: " + response.SetBiblioInfoResult.ErrorInfo;
                    return -1;
                }



                string dbpre = "";
                string temp = strBiblioDbName.Substring(strBiblioDbName.Length - 1);
                try
                {
                    int n = Convert.ToInt32(temp);
                    dbpre = n.ToString();
                }
                catch
                { }



                //// 创建册记录
                //List<string> refids = CreateEntityRecords(entity_form, 10);
                EntityInfo[] entities = null;
                entities = new EntityInfo[itemCountPerBiblio * locs.Count];


                for (int j = 0; j < itemCountPerBiblio; j++)
                {
                    for (int x = 0; x < locs.Count; x++)
                    {
                        LocItem loc = locs[x];
                        EntityInfo info = new EntityInfo();
                        info.RefID = Guid.NewGuid().ToString();
                        info.Action = "new";
                        info.Style = "";

                        info.OldRecPath = "";
                        info.OldRecord = "";
                        info.OldTimestamp = null;

                        info.NewRecPath = "";
                        info.NewRecord = "";
                        info.NewTimestamp = null;

                        int nIndex = j * locs.Count + x;
                        entities[nIndex] = info;

                        /*
    <dprms:item path="中文图书实体/87" timestamp="2a3a427665d5d4080000000000000010" xmlns:dprms="http://dp2003.com/dprms">
      <parent>43</parent> 
      <refID>8e05d74b-650e-42f8-99cc-45442150c115</refID> 
      <barcode>DPB000051</barcode> 
      <location>方洲小学/图书馆</location> 
      <seller>新华书店</seller> 
      <source>本馆经费</source> 
      <price>CNY10.00</price> 
      <batchNo>201707</batchNo> 
      <accessNo>I17(198.4)/Y498</accessNo> 
      <bookType>普通</bookType>
    </dprms:item>
                         */
                        XmlDocument itemDom = new XmlDocument();
                        itemDom.LoadXml("<root />");
                        XmlNode root = itemDom.DocumentElement;

                        string strTargetBiblioRecID = GetRecordID(strOutputPath);
                        DomUtil.SetElementText(root, "parent", strTargetBiblioRecID);

                        string barcode = loc.Prefix + dbpre + barcordStart.ToString().PadLeft(5, '0');// i.ToString().PadLeft(2, '0')+j.ToString().PadLeft(3,'0');
                        DomUtil.SetElementText(root, "barcode", barcode);
                        DomUtil.SetElementText(root, "location", loc.Location);
                        DomUtil.SetElementText(root, "batchNo", "test001");
                        DomUtil.SetElementText(root, "bookType", loc.BookType);

                        info.NewRecord = itemDom.DocumentElement.OuterXml;


                    }

                    barcordStart++;
                }

                EntityInfo[] errorinfos = null;

                SetEntitiesResponse result = channel.SetEntities(
                     // this._stop,   // this.BiblioStatisForm.stop,
                     strOutputPath,
                     entities);
                //out errorinfos,
                //out strError);
                errorinfos = result.errorinfos;
                strError = result.SetEntitiesResult.ErrorInfo;
                if (result.SetEntitiesResult.Value == -1)
                    return -1;


            }


            return 0;

        }


        // 删除测试环境
        public int DeleteLibEnv(bool bzfg,
            int dbCount,
            out string error)
        {
            error = "";
            int nRet = 0;

            // 检查登录信息
            //if (string.IsNullOrEmpty(this.dp2ServerUrl) == true
            //    || string.IsNullOrEmpty(this.dp2Username) == true)
            //{
            //    error = "尚未配置dp2系统登录信息";
            //    return -1;
            //}
            //this._channelPool.BeforeLogin -= _channelPool_BeforeLogin;
            //this._channelPool.BeforeLogin += _channelPool_BeforeLogin;


            //===
            RestChannel channel = null;// this.GetChannel();
            //TimeSpan old_timeout = channel.Timeout;
            //channel.Timeout = TimeSpan.FromMinutes(10);


            string info = "开始删除测试环境 ...";

            //LogManager.Logger.Info(info);
            EnableCtrls(false);
            try
            {
                if (dbCount <= 0)
                    dbCount = 1;

                string dbName = "测试中文图书";
                for (int i = 0; i < dbCount; i++)
                {
                    if (dbName != "")
                        dbName += ",";
                    dbName += "测试中文图书" + (i + 1);
                }

                // 删除书目库
                info = "正在删除测试用书目库 ...";
                //ProgressSetMessage(info);
                //LogManager.Logger.Info(info);
                string strOutputInfo = "";
                long lRet = channel.ManageDatabase(
                    // _stop,
                    "delete",
                    dbName,//Env_BiblioDbName,    // strDatabaseNames,
                    "",
                    out strOutputInfo,
                    out error);
                if (lRet == -1)
                {
                    if (channel.ErrorCode != ErrorCode.NotFound)
                        goto ERROR1;
                }


                // 删除读者库
                info = "正在删除测试用读者库 ...";
                string strDatabaseNames = Env_ZG_ReaderDbName;
                if (bzfg == true)
                {
                    strDatabaseNames = Env_ZG_ReaderDbName
                        + "," + Env_A_ReaderDbName
                        + "," + Env_B_ReaderDbName
                        + "," + Env_C_ReaderDbName;
                }

                //ProgressSetMessage(info);
                //LogManager.Logger.Info(info);
                lRet = channel.ManageDatabase(
                   // _stop,
                   "delete",
                   strDatabaseNames,
                   "",
                   out strOutputInfo,
                   out error);
                if (lRet == -1)
                {
                    if (channel.ErrorCode !=ErrorCode.NotFound)
                        goto ERROR1;
                }



                // *** 删除馆藏地配置
                info = "正在删除馆藏地 ...";
                //ProgressSetMessage(info);
                //LogManager.Logger.Info(info);
                List<DigitalPlatform.CirculationClient.ManageHelper.LocationItem> items = new List<DigitalPlatform.CirculationClient.ManageHelper.LocationItem>();
                items.Add(new DigitalPlatform.CirculationClient.ManageHelper.LocationItem(Env_ZG_LibraryCode, Env_ZG_Location, true, false));
                if (bzfg == true)
                {
                    items.Add(new DigitalPlatform.CirculationClient.ManageHelper.LocationItem(Env_A_LibraryCode, Env_A_Location, true, false));
                    items.Add(new DigitalPlatform.CirculationClient.ManageHelper.LocationItem(Env_B_LibraryCode, Env_B_Location, true, false));
                    items.Add(new DigitalPlatform.CirculationClient.ManageHelper.LocationItem(Env_C_LibraryCode, Env_C_Location, true, false));
                }
                nRet = ManageHelper.AddLocationTypes(
                    channel,
                    // this.Progress,
                    "remove",
                    items,
                    out error);
                if (nRet == -1)
                    goto ERROR1;

                //***删除工作日历
                CalenderInfo cInfo = null;
                info = "正在删除工作日历 ...";
                //ProgressSetMessage(info);
                //LogManager.Logger.Info(info);
                CalenderInfo[] infos1 = null;
                lRet = channel.GetCalendar(
                    // this.Progress,
                    "get",
                    Env_ZG_CalenderName,
                    0,
                    -1,
                    out infos1,
                    out error);
                if (lRet == -1)
                    goto ERROR1;
                if (lRet > 0)
                {
                    // 册总馆日历
                    cInfo = new CalenderInfo();
                    cInfo.Name = Env_ZG_CalenderName;
                    cInfo.Range = "20220101-20241231";
                    cInfo.Comment = "";
                    cInfo.Content = "";
                    lRet = channel.SetCalendar(
                       // _stop,
                       "delete",
                       cInfo,
                       out error);
                    if (lRet == -1)
                        goto ERROR1;
                }

                // 删除分馆的开馆日历
                if (bzfg == true)
                {
                    lRet = channel.GetCalendar(
                        // this.Progress,
                        "get",
                        Env_A_LibraryCode + "/" + Env_A_CalenderName,
                        0,
                        -1,
                        out infos1,
                        out error);
                    if (lRet == -1)
                        goto ERROR1;
                    if (lRet > 0)
                    {
                        // 册A馆日历
                        cInfo = new CalenderInfo();
                        cInfo.Name = Env_A_LibraryCode + "/" + Env_A_CalenderName;
                        cInfo.Range = "20220101-20241231";
                        cInfo.Comment = "";
                        cInfo.Content = "";
                        lRet = channel.SetCalendar(
                           // _stop,
                           "delete",
                           cInfo,
                           out error);
                        if (lRet == -1)
                            goto ERROR1;
                    }
                    lRet = channel.GetCalendar(
                        // this.Progress,
                        "get",
                        Env_B_LibraryCode + "/" + Env_B_CalenderName,
                        0,
                        -1,
                        out infos1,
                        out error);
                    if (lRet == -1)
                        goto ERROR1;
                    if (lRet > 0)
                    {
                        // 册B馆日历
                        cInfo = new CalenderInfo();
                        cInfo.Name = Env_B_LibraryCode + "/" + Env_B_CalenderName;
                        cInfo.Range = "20220101-20241231";
                        cInfo.Comment = "";
                        cInfo.Content = "";
                        lRet = channel.SetCalendar(
                           // _stop,
                           "delete",
                           cInfo,
                           out error);
                        if (lRet == -1)
                            goto ERROR1;

                    }

                    // 册C馆日历
                    cInfo = new CalenderInfo();
                    cInfo.Name = Env_C_LibraryCode + "/" + Env_C_CalenderName;
                    cInfo.Range = "20220101-20241231";
                    cInfo.Comment = "";
                    cInfo.Content = "";
                    lRet = channel.SetCalendar(
                       // _stop,
                       "delete",
                       cInfo,
                       out error);
                    if (lRet == -1)
                    {
                        // 删除失败有可能是根本没有这个日历
                        //goto ERROR1;
                    }
                }


                // ***删除权限流通权限
                info = "正在删除流通权限 ...";
                //ProgressSetMessage(info);
                //LogManager.Logger.Info(info);

                List<string> zgReaderTypes = new List<string>();
                //zgReaderTypes.Add(Env_ZG_PatronType);
                //zgReaderTypes.Add(Env_ZG_PatronType_teacher);
                zgReaderTypes.Add(this._readerType);
                List<string> zgBookTypes = new List<string>();
                //zgBookTypes.Add(Env_ZG_BookType);
                zgBookTypes.Add(this._bookType);

                List<string> fglist = new List<string>();
                if (bzfg == true)
                {
                    fglist.Add(Env_A_LibraryCode);
                    fglist.Add(Env_B_LibraryCode);
                    fglist.Add(Env_C_LibraryCode);
                }
                nRet = this.RemoveTestRightsTable(channel, null,
                    zgReaderTypes,
                    zgBookTypes,
                    fglist,
                    out error);
                if (nRet == -1)
                    goto ERROR1;

                info = "正在删除工作人员帐号 ...";
                //ProgressSetMessage(info);
                //LogManager.Logger.Info(info);
                lRet = this.SetUser(channel, "delete", Env_ZG_LibraryCode, "zg", out error);
                if (lRet == -1)
                    goto ERROR1;

                if (bzfg == true)
                {
                    lRet = this.SetUser(channel, "delete", Env_A_LibraryCode, "a", out error);
                    if (lRet == -1)
                        goto ERROR1;
                    lRet = this.SetUser(channel, "delete", Env_B_LibraryCode, "b", out error);
                    if (lRet == -1)
                        goto ERROR1;
                    lRet = this.SetUser(channel, "delete", Env_C_LibraryCode, "c", out error);
                    if (lRet == -1)
                        goto ERROR1;
                }

                return 0;
            }
            catch (Exception ex)
            {
                error = "Exception: " + ExceptionUtil.GetExceptionText(ex);
                goto ERROR1;
            }
            finally
            {
#if NO
                Progress.EndLoop();
                Progress.OnStop -= new StopEventHandler(this.DoStop);
                Progress.Initial("");
                Progress.HideProgress();
#endif
                EnableCtrls(true);

                //channel.Timeout = old_timeout;
                //this.ReturnChannel(channel);  //todo
            }


        ERROR1:

            //LogManager.Logger.Error(error);
            return -1;
        }

        public int DbCount = 1;


        // 初始化测试环境
        public void IniLibEnv(bool bzfg,
            int dbCount,
            int biblioCount,
            int itemCountPerBiblio)
        {
            Task.Run(() =>
            {
                string error = "";
                int nRet = 0;
                long lRet = 0;
                string strOutputInfo = "";
                string info = "";


                //先删除测试环境
                nRet = this.DeleteLibEnv(bzfg, 1,//this.DbCount,
                    out error);
                if (nRet == -1)
                {
                    error = "删除测试环境出错：" + error;
                    goto ERROR1;
                }

                //===


                RestChannel channel = null;// this.GetChannel();  todo
                //TimeSpan old_timeout = channel.Timeout;
                //channel.Timeout = TimeSpan.FromMinutes(10);

#if NO
            Progress.Style = StopStyle.EnableHalfStop;
            Progress.OnStop += new StopEventHandler(this.DoStop);
            Progress.Initial(info);
#endif
                info = "开始初始化测试环境 ...";
                //LogManager.Logger.Info(info);

                // Progress.BeginLoop();
                EnableCtrls(false);
                try
                {
                    // 先要创建读者库，才能有分馆
                    // ***创建测试所需的读者库
                    info = "正在创建测试用读者库 ...";
                    //ProgressSetMessage(info);
                    //LogManager.Logger.Info(info);

                    //// 总馆读者库
                    //lRet = CreateReaderDb(channel, Env_ZG_ReaderDbName, Env_ZG_LibraryCode);
                    //if (lRet == -1)
                    //    goto ERROR1;

                    if (bzfg == true)
                    {
                        /*
                        // A馆读者库
                        info = "正在创建A馆读者库 ...";
                        //ProgressSetMessage(info);
                        //LogManager.Logger.Info(info);
                        lRet = CreateReaderDb(channel, Env_A_ReaderDbName,
                            Env_A_LibraryCode);
                        if (lRet == -1)
                            goto ERROR1;

                        // B馆读者库
                        info = "正在创建B馆读者库 ...";
                        //ProgressSetMessage(info);
                        //LogManager.Logger.Info(info);
                        lRet = CreateReaderDb(channel, Env_B_ReaderDbName,
                            Env_B_LibraryCode);
                        if (lRet == -1)
                            goto ERROR1;

                        // C馆读者库
                        info = "正在创建C馆读者库 ...";
                        //ProgressSetMessage(info);
                        //LogManager.Logger.Info(info);
                        lRet = CreateReaderDb(channel, Env_C_ReaderDbName,
                            Env_C_LibraryCode);
                        if (lRet == -1)
                            goto ERROR1;
                        */
                    }

                    // *** 定义测试所需的馆藏地
                    info = "正在定义测试所需的馆藏地 ...";
                    //ProgressSetMessage(info);
                    //LogManager.Logger.Info(info);

                    List<DigitalPlatform.CirculationClient.ManageHelper.LocationItem> items = new List<DigitalPlatform.CirculationClient.ManageHelper.LocationItem>();
                    items.Add(new DigitalPlatform.CirculationClient.ManageHelper.LocationItem("", Env_ZG_Location, true, true));
                    if (bzfg == true)
                    {
                        items.Add(new DigitalPlatform.CirculationClient.ManageHelper.LocationItem(Env_A_LibraryCode, Env_A_Location, true, true));
                        items.Add(new DigitalPlatform.CirculationClient.ManageHelper.LocationItem(Env_B_LibraryCode, Env_B_Location, true, true));
                        items.Add(new DigitalPlatform.CirculationClient.ManageHelper.LocationItem(Env_C_LibraryCode, Env_C_Location, true, true));
                    }
                    nRet = ManageHelper.AddLocationTypes(
                        channel,
                        // this.Progress,
                        "add",
                        items,
                        out error);
                    if (nRet == -1)
                        goto ERROR1;

                    //***创建工作日历
                    info = "正在创建工作日历 ...";
                    //ProgressSetMessage(info);
                    //LogManager.Logger.Info(info);
                    // 总馆
                    CalenderInfo cInfo = new CalenderInfo();
                    cInfo.Name = Env_ZG_CalenderName;
                    cInfo.Range = "20220101-20241231";
                    cInfo.Comment = "";
                    cInfo.Content = "";
                    lRet = channel.SetCalendar(
                       // _stop,
                       "new",
                       cInfo,
                       out error);
                    if (lRet == -1)
                        goto ERROR1;

                    if (bzfg == true)
                    {
                        // A馆
                        cInfo = new CalenderInfo();
                        cInfo.Name = Env_A_LibraryCode + "/" + Env_A_CalenderName;
                        cInfo.Range = "20220101-20241231";
                        cInfo.Comment = "";
                        cInfo.Content = "";
                        lRet = channel.SetCalendar(
                           // _stop,
                           "new",
                           cInfo,
                           out error);
                        if (lRet == -1)
                            goto ERROR1;
                        // B馆
                        cInfo = new CalenderInfo();
                        cInfo.Name = Env_B_LibraryCode + "/" + Env_B_CalenderName;
                        cInfo.Range = "20220101-20241231";
                        cInfo.Comment = "";
                        cInfo.Content = "";
                        lRet = channel.SetCalendar(
                           // _stop,
                           "new",
                           cInfo,
                           out error);
                        if (lRet == -1)
                            goto ERROR1;

                        // C馆
                        cInfo = new CalenderInfo();
                        cInfo.Name = Env_C_LibraryCode + "/" + Env_C_CalenderName;
                        cInfo.Range = "20220101-20241231";
                        cInfo.Comment = "";
                        cInfo.Content = "";
                        lRet = channel.SetCalendar(
                           // _stop,
                           "new",
                           cInfo,
                           out error);
                        if (lRet == -1)
                            goto ERROR1;
                    }

                    // ***创建流通权限
                    info = "正在创建测试所需的流通权限 ...";
                    //ProgressSetMessage(info);
                    //LogManager.Logger.Info(info);

                    // 总馆
                    List<rightTable> rightList = new List<rightTable>();
                    rightTable zg = new rightTable(Env_ZG_LibraryCode,
                        Env_ZG_PatronType, true,
                        Env_ZG_BookType,
                        Env_ZG_CalenderName);
                    rightList.Add(zg);

                    rightTable zg1 = new rightTable(Env_ZG_LibraryCode,
                        Env_ZG_PatronType_teacher, true,
                        Env_ZG_BookType,
                        Env_ZG_CalenderName);
                    rightList.Add(zg1);

                    if (bzfg == true)
                    {
                        // A馆
                        rightTable a = new rightTable(Env_A_LibraryCode,
                            Env_A_PatronType, true,
                            Env_A_BookType,
                            Env_A_LibraryCode + "/" + Env_A_CalenderName);
                        rightList.Add(a);

                        rightTable a2 = new rightTable(Env_A_LibraryCode,
                            Env_A_PatronType_teacher, true,
                            Env_A_BookType,
                            Env_A_LibraryCode + "/" + Env_A_CalenderName);
                        rightList.Add(a2);

                        //B馆
                        rightTable b = new rightTable(Env_B_LibraryCode,
                            Env_B_PatronType, true,
                            Env_B_BookType,
                            Env_B_LibraryCode + "/" + Env_B_CalenderName);
                        rightList.Add(b);

                        rightTable b2 = new rightTable(Env_B_LibraryCode,
                            Env_B_PatronType_teacher, true,
                            Env_B_BookType,
                            Env_B_LibraryCode + "/" + Env_B_CalenderName);
                        rightList.Add(b2);

                        //C馆
                        rightTable c = new rightTable(Env_C_LibraryCode,
                            Env_C_PatronType, true,
                            Env_C_BookType,
                            Env_C_LibraryCode + "/" + Env_C_CalenderName);
                        rightList.Add(c);

                        rightTable c2 = new rightTable(Env_C_LibraryCode,
                            Env_C_PatronType_teacher, true,
                            Env_C_BookType,
                            Env_C_LibraryCode + "/" + Env_C_CalenderName);
                        rightList.Add(c2);
                    }

                    nRet = this.AddTestRightsTable(channel, null, rightList,
                        out error);
                    if (nRet == -1)
                        goto ERROR1;




                    for (int i = 0; i < DbCount; i++)
                    {
                        string biblioDbName = "测试中文图书" + (i + 1).ToString();

                        // ***创建测试所需的书目库
                        info = "正在创建" + biblioDbName;
                        //ProgressSetMessage(info);
                        //LogManager.Logger.Info(info);
                        // 创建一个书目库
                        // parameters:
                        // return:
                        //      -1  出错
                        //      0   没有必要创建，或者操作者放弃创建。原因在 strError 中
                        //      1   成功创建
                        nRet = ManageHelper.CreateBiblioDatabase(
                            channel,
                            // this.Progress,
                            biblioDbName, //Env_BiblioDbName, //C_BiblioDbName,
                            "book",
                            "unimarc",
                            out error);
                        if (nRet == -1)
                            goto ERROR1;

                        // 创建书目记录
                        info = "正在创建书目记录和册记录 ...";
                        //ProgressSetMessage(info);
                        //LogManager.Logger.Info(info);

                        List<LocItem> locs = new List<LocItem>();
                        locs.Add(new LocItem(Env_ZG_Location, "Z", Env_ZG_BookType));
                        if (bzfg == true)
                        {
                            locs.Add(new LocItem(Env_A_LibraryCode + "/" + Env_A_Location, "A", Env_A_BookType));
                            locs.Add(new LocItem(Env_B_LibraryCode + "/" + Env_B_Location, "B", Env_B_BookType));
                            locs.Add(new LocItem(Env_C_LibraryCode + "/" + Env_C_Location, "C", Env_C_BookType));
                        }
                        nRet = this.CreateBiblioRecord(channel,
                            biblioDbName,
                            locs,
                            biblioCount,
                            itemCountPerBiblio, out error);
                        if (nRet == -1)
                            goto ERROR1;
                    }



                    info = "正在创建测试读者记录 ...";
                    //ProgressSetMessage(info);
                    //LogManager.Logger.Info(info);
                    //总库读者-学生
                    lRet = this.CreateReaderRecord(channel, Env_ZG_ReaderDbName,
                        Env_ZG_PatronType,
                        "PZX",
                        3,
                        out error);
                    if (lRet == -1)
                        goto ERROR1;

                    //总库读者-老师
                    lRet = this.CreateReaderRecord(channel, Env_ZG_ReaderDbName,
                        Env_ZG_PatronType_teacher,
                        "PZT",
                        3,
                        out error);
                    if (lRet == -1)
                        goto ERROR1;

                    if (bzfg == true)
                    {
                        info = "正在创建A馆读者记录 ...";
                        //ProgressSetMessage(info);
                        //LogManager.Logger.Info(info);
                        //A读者
                        lRet = this.CreateReaderRecord(channel, Env_A_ReaderDbName,
                            Env_A_PatronType,
                            "PAX",
                            3,
                            out error);
                        if (lRet == -1)
                            goto ERROR1;
                        lRet = this.CreateReaderRecord(channel, Env_A_ReaderDbName,
                            Env_A_PatronType_teacher,
                            "PAT",
                            3,
                            out error);
                        if (lRet == -1)
                            goto ERROR1;


                        info = "正在创建B馆读者记录 ...";
                        //ProgressSetMessage(info);
                        //LogManager.Logger.Info(info);
                        //B库读者
                        lRet = this.CreateReaderRecord(channel, Env_B_ReaderDbName,
                            Env_B_PatronType,
                            "PBX",
                            3,
                            out error);
                        if (lRet == -1)
                            goto ERROR1;
                        lRet = this.CreateReaderRecord(channel, Env_B_ReaderDbName,
                            Env_B_PatronType_teacher,
                            "PBT",
                            3,
                            out error);
                        if (lRet == -1)
                            goto ERROR1;

                        info = "正在创建C馆读者记录 ...";
                        //ProgressSetMessage(info);
                        //LogManager.Logger.Info(info);
                        //C库读者
                        lRet = this.CreateReaderRecord(channel, Env_C_ReaderDbName,
                            Env_C_PatronType,
                            "PCX",
                            3,
                            out error);
                        if (lRet == -1)
                            goto ERROR1;
                        lRet = this.CreateReaderRecord(channel, Env_C_ReaderDbName,
                            Env_C_PatronType_teacher,
                            "PCT",
                            3,
                            out error);
                        if (lRet == -1)
                            goto ERROR1;

                    }
                    info = "正在创建工作人员帐号 ...";
                    //ProgressSetMessage(info);
                    //LogManager.Logger.Info(info);
                    lRet = this.SetUser(channel, "new", Env_ZG_LibraryCode, "zg", out error);
                    if (lRet == -1)
                        goto ERROR1;
                    if (bzfg == true)
                    {
                        lRet = this.SetUser(channel, "new", Env_A_LibraryCode, "a", out error);
                        if (lRet == -1)
                            goto ERROR1;
                        lRet = this.SetUser(channel, "new", Env_B_LibraryCode, "b", out error);
                        if (lRet == -1)
                            goto ERROR1;
                        lRet = this.SetUser(channel, "new", Env_C_LibraryCode, "c", out error);
                        if (lRet == -1)
                            goto ERROR1;
                    }

                    info = "初始化测试环境完成";
                    //ProgressSetMessage(info);
                    //LogManager.Logger.Info(info);
                    MessageBoxShow(this, info);
                    return;
                }
                catch (Exception ex)
                {
                    error = "Exception: " + ExceptionUtil.GetExceptionText(ex);
                    goto ERROR1;
                }
                finally
                {
#if NO
                Progress.EndLoop();
                Progress.OnStop -= new StopEventHandler(this.DoStop);
                Progress.Initial("");
                Progress.HideProgress();
#endif
                   EnableCtrls(true);

                    //channel.Timeout = old_timeout;
                    //this.ReturnChannel(channel); //todo
                }


            ERROR1:
                info = "初始化测试环境出错：" + error;
                //LogManager.Logger.Info(info);
                MessageBox.Show(this, info);
                return;
            });
        }