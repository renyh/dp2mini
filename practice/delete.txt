        // 多个动作
        public void DoReader(UserInfo u, string xmlPath, List<string> actionList, bool expectSucc, bool isReader)
        {
            foreach (string action in actionList)
            {
                this.DoReader(u,xmlPath,action,expectSucc,isReader);
            }
        }
        public string DoReader(UserInfo u, string xmlPath, string action, bool expectSucc, bool isReader, string xml = "")
        {

            return DoRes(u,C_Type_reader,xmlPath,action,expectSucc,isReader);  

            /*
            WriteResResponse writeResponse = null;
            SetReaderInfoResponse setReaderResponse= null;
            GetResResponse getResResponse = null;

            string outputPath = "";


            // 根据xml路径，算出对象路径
            string objectPath =xmlPath + "/object/0";

            string expectResult = "应失败";
            if (expectSucc == true)
                expectResult = "应成功";

            // 删除的时候没必须准备xml
            if (action !="delete" && string.IsNullOrEmpty(xml)==true)
                xml = this.GetXml(C_Type_reader, true);

            // 新增读者的情况，用两个接口测试
            if (action == "new")
            {
                // 用WriteRes()新建读者xml
                this.displayLine(GetBR() + getBold(u.UserName + "用WriteRes()新建读者xml，" + expectResult));
                writeResponse = this.WriteXml(u, xmlPath, xml, isReader);
                this.CheckResult(expectSucc, writeResponse.WriteResResult);

                //返回第一笔path
                outputPath = writeResponse.strOutputResPath;//.strSavedRecPath;

                // 用SetReaderInfo新建读者
                xml = this.GetXml(C_Type_reader, true);  //注意要重新获取一下xml,要不证号重复。
                this.displayLine(GetBR() + getBold(u.UserName + "用SetReaderInfo()新建读者xml，" + expectResult));
                setReaderResponse = this.SetReaderInfo(u, "new", xmlPath, xml, isReader);
                this.CheckResult(expectSucc, setReaderResponse.SetReaderInfoResult);


            }
            else if (action == "change")
            {
                // 用WriteRes修改读者记录xml
                this.displayLine(GetBR() + getBold(u.UserName + "用WriteRes()修改读者xml，" + expectResult));
                writeResponse = this.WriteXml(u, xmlPath, xml, isReader);
                this.CheckResult(expectSucc, writeResponse.WriteResResult);

                // 用SetReaderInfo修改其它读者xml
                this.displayLine(GetBR() + getBold(u.UserName + "用SetReaderInfo()修改读者xml，" + expectResult));
                setReaderResponse = this.SetReaderInfo(u, "change", xmlPath, xml, isReader);
                this.CheckResult(expectSucc, setReaderResponse.SetReaderInfoResult);

                // 用WriteRes修改读者的对象，应不成功
                this.displayLine(GetBR() + getBold(u.UserName + "用WriteRes()修改读者的对象，" + expectResult));
                writeResponse = this.WriteObject(u, objectPath, isReader);
                this.CheckResult(expectSucc, writeResponse.WriteResResult);
            }
            else if (action == "delete")
            {
                // 用SetReaderInfo()删除读者
                this.displayLine(GetBR() + getBold(u.UserName + "用SetReaderInfo()删除读者xml，" + expectResult));
                setReaderResponse = this.SetReaderInfo(u, "delete", xmlPath, "", isReader);
                this.CheckResult(expectSucc, setReaderResponse.SetReaderInfoResult);

                // 如果是预期失败的情况，可以再用WriteRes删一下。
                // 如果是预期成功的，则不必要了，因为记录已经被删掉了。
                if (expectSucc==false)
                {
                    // 用 WriteRes()删除读者
                    this.displayLine(GetBR() + getBold(u.UserName + "用 WriteRes()删除读者xml，" + expectResult));
                    writeResponse = this.WriteResForDel(u, xmlPath,  isReader);
                    this.CheckResult(expectSucc, writeResponse.WriteResResult);
                }
            }
            else if (action == "get")
            {
                // 获取读者xml
                this.displayLine(GetBR() + getBold(u.UserName + "用GetRes() 获取读者xml，" + expectResult));
                getResResponse = this.GetRes(u, xmlPath,isReader);
                this.CheckResult(expectSucc,getResResponse.GetResResult);

                // 获取读者对象
                this.displayLine(GetBR() + getBold(u.UserName + "用GetRes() 获取读者的对象，" + expectResult));
                getResResponse = this.GetRes(u, objectPath,isReader);
                this.CheckResult(expectSucc, getResResponse.GetResResult);

                // 用GetReaderInfo()获取读者xml
                this.displayLine(GetBR() + getBold(u.UserName + "用GetReaderInfo() 获取读者xml，" + expectResult));
                GetReaderInfoResponse response1 = this.GetReaderInfo(u, xmlPath,isReader);
                this.CheckResult(expectSucc, response1.GetReaderInfoResult);
            }
            else
                throw new Exception("DoReader不支持的action=" + action);

            return outputPath;
            */
        }



     public void CheckFail(UserInfo u, string type, string newPath,string otherXmlPath, bool isReader)
        {
            WriteResResponse response = null;

            string otherObjectPath = otherXmlPath + "/object/0";

            // 新建他馆的xml
            this.displayLine(GetBR() + getBold(u.UserName + "新建他馆"+type+"xml，应失败。"));
            response = this.WriteXml(u, newPath, this.GetXml(type, true));
            if (response.WriteResResult.Value == -1)
                this.displayLine("符合预期");
            else
                this.displayLine(getRed("不符合预期，不能给他馆新建读者"));



            // 修改他馆读者
            this.displayLine(GetBR() + getBold(u.UserName + "修改他馆"+type+"xml，应失败。"));
            response = this.WriteXml(u, otherXmlPath, this.GetXml(C_Type_reader, true));
            if (response.WriteResResult.Value == -1)
            {
                this.displayLine("符合预期");
            }
            else
                this.displayLine(getRed("不符合预期"));

            // 修改他馆读者对象数据
            this.displayLine(GetBR() + getBold(u.UserName + "修改他人"+type+"下对象数据，应失败。"));
            response = this.WriteObject(u, otherObjectPath);
            if (response.WriteResResult.Value == -1)
                this.displayLine("符合预期");
            else
                this.displayLine(getRed("不符合预期"));

            // 删除他馆读者xml              
            this.displayLine(GetBR() + getBold(u.UserName + "删除他馆"+type+"xml，应失败。"));
            LibraryServerResult res = this.DelXml(u, C_Type_reader, otherXmlPath, false);
            if (res.Value == -1)
                this.displayLine("符合预期");
            else
                this.displayLine(getRed("不符合预期"));
        }


===
2023/2/27 预约到书，老代码
        private void button_readerLogin_arrived_Click(object sender, EventArgs e)
        {
            /*
准备环境：
管理员创建两个读者
创建两个册记录
为读者1预约1，直接用WriteRes来写，主要是使用这条记录。
为读者2预约2，

用读者身份，应可以获取自己的预约到书，不能获取别人的预约到书。
不能 创建/修改/删除 自己和他人的预约记录。
            目前读者可以 修改 和 删除预约者是自己的记录？？？
            

             */

            this.EnableCtrls(false);
            try
            {
                // 清空输出
                ClearResult();

                WriteResResponse writeRes = null;
                LibraryServerResult ret = null;

                #region 环境准备

                // 用supervisor帐户创建一个读者，有预约到书库的读写权限，后面用此读者帐户操作
                this.displayLine(this.getLarge("用管理员身份创建一个读者，有预约到书库的读写权限，后面用此读者帐户操作"));
                string readerBarcode = "";
                writeRes = this.CreateReaderBySuperviosr("setarrivedinfo,getarrivedinfo,writearrivedobject,getarrivedobject",
                    "",  //个人书斋
                    out readerBarcode);
                if (writeRes.WriteResResult.Value == -1)
                    throw new Exception("管理员创建读者异常：" + writeRes.WriteResResult.ErrorInfo);
                string readerOwnerPath = writeRes.strOutputResPath;

                // 修改读者的密码
                this.displayLine(this.getBold("修改读者" + readerBarcode + "的密码，后面用此读者身份登录。"));
                this.ChangeReaderPasswordBySupervisor(readerBarcode);
                UserInfo u = new UserInfo
                {
                    UserName = readerBarcode,
                    Password = "1",
                };

                // 用supervisor创建第2个读者
                this.displayLine(this.getLarge("用supervisor帐户创建第2个读者，下面会为这两个读者预约册。"));
                string reader2 = "";
                writeRes = this.CreateReaderBySuperviosr("",//setiteminfo, getiteminfo, writeitemobject, getitemobject",
                    "",  //个人书斋
                    out reader2);
                if (writeRes.WriteResResult.Value == -1)
                    throw new Exception("管理员创建读者异常：" + writeRes.WriteResResult.ErrorInfo);

                // 用supervisor创建两个册记录
                this.displayLine(this.getLarge("用supervisor帐号创建2条册记录。"));

                string newPath = this.GetAppendPath(C_Type_item);
                string itemBarcode1 = "";
                string itemPath1 = "";
                writeRes = this.WriteXml(this.mainForm.GetSupervisorAccount(),
                     newPath,
                     GetXml(C_Type_item, true, out itemBarcode1));
                if (writeRes.WriteResResult.Value == -1)
                    throw new Exception("管理员创建第1册异常：" + writeRes.WriteResResult.ErrorInfo);
                itemPath1 = writeRes.strOutputResPath;

                string itemBarcode2 = "";
                string itemPath2 = "";
                writeRes = this.WriteXml(this.mainForm.GetSupervisorAccount(),
                     newPath,
                     GetXml(C_Type_item, true, out itemBarcode2));
                if (writeRes.WriteResResult.Value == -1)
                    throw new Exception("管理员创建第2册异常：" + writeRes.WriteResResult.ErrorInfo);
                itemPath2 = writeRes.strOutputResPath;

                // 预约路径
                string ownerArrivedPath = "";  //自己预约的书
                string ownerObjectPath = "";
                string otherArrivedPath = "";   // 他人预约的书
                string otherObjectPath = "";
                string arrivedNewPath = this.GetAppendPath(C_Type_Arrived);


                // 管理员为读者1预约册1
                this.displayLine(this.getLarge("管理员为读者"+readerBarcode+"预约册"+itemBarcode1));
                writeRes = this.WriteXml(this.mainForm.GetSupervisorAccount(),
                                                     arrivedNewPath,
                                                     GetArrivedXml(readerBarcode, itemBarcode1,true),
                                                     false);
                if (writeRes.WriteResResult.Value == -1)
                    throw new Exception("管理员写预约记录异常：" + writeRes.WriteResResult.ErrorInfo);
                ownerArrivedPath = writeRes.strOutputResPath;
                ownerObjectPath = ownerArrivedPath + "/object/0";

                // 管理员为读者2预约册2
                this.displayLine(this.getLarge("管理员为读者"+reader2+"预约册"+itemBarcode2));
                writeRes = this.WriteXml(this.mainForm.GetSupervisorAccount(),
                                                     arrivedNewPath,
                                                     GetArrivedXml(reader2, itemBarcode2,true),
                                                     false);
                if (writeRes.WriteResResult.Value == -1)
                    throw new Exception("管理员写预约记录异常：" + writeRes.WriteResResult.ErrorInfo);
                otherArrivedPath = writeRes.strOutputResPath;
                otherObjectPath = otherArrivedPath + "/object/0";

                #endregion



                #region 第1组测试：读者新建预约到书，应不能。

                this.displayLine(this.getLarge("第1组测试：读者新建预约到书，应不可以。"));


                // 用WriteRes新建评注
                this.displayLine(GetBR() + getBold(u.UserName + "用WriteRes新建评注。"));
                writeRes = this.WriteXml(u, arrivedNewPath,
                    this.GetXml(C_Type_Arrived, true), true);
                if (writeRes.WriteResResult.Value ==-1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期，读者应不能创建预约到书记录。"));
               

                #endregion


                #region 第2组测试：读者修改预约到书

                this.displayLine(this.getLarge("第2组测试：读者修改预约到书，应不可以。"));


                // 修改预约者是自己的预约到书xml
                this.displayLine(GetBR() + getBold(u.UserName + "修改预约者是自己的预约到书xml，应成功。"));
                writeRes = this.WriteXml(u, ownerArrivedPath,
                    this.GetArrivedXml(readerBarcode,"B003",true), true);
                if (writeRes.WriteResResult.Value ==0)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期，读者应不能修改预约者是自己的预约到书记录。"));

                // 修改预约者是自己的预约到书的对象
                this.displayLine(GetBR() + getBold(u.UserName + "修改预约者是自己的预约到书的对象，应成功。"));
                writeRes = this.WriteObject(u, ownerObjectPath, true);
                if (writeRes.WriteResResult.Value ==0)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期，读者应不能修改预约者是他人的预约到书记录。"));

                //修改预约者是他人的预约到书xml
                this.displayLine(GetBR() + getBold(u.UserName + "修改预约者是他人的预约到书xml，应失败。"));
                writeRes = this.WriteXml(u, otherArrivedPath,
                    this.GetArrivedXml(reader2, "B004",true), true);
                if (writeRes.WriteResResult.Value == -1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期"));


                // 修改预约者是他人的预约到书的对象
                this.displayLine(GetBR() + getBold(u.UserName + "修改预约者是他人的预约到书的对象，应失败。"));
                writeRes = this.WriteObject(u, otherObjectPath, true);
                if (writeRes.WriteResResult.Value == -1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期"));

                #endregion


                #region 第3组测试：获取预约到书

                this.displayLine(this.getLarge("第3组测试：获取预约到书"));


                // 用GetRes()获取
                this.displayLine(GetBR() + getBold(u.UserName + "获取预约者是自己的预约到书xml，应成功。"));
                GetResResponse getRes = this.GetRes(u, ownerArrivedPath, true);
                if (getRes.GetResResult.Value >= 0)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期"));

                // 用GetRes()获取自己下的对象
                this.displayLine(GetBR() + getBold(u.UserName + "获取预约者是自己的预约到书的对象，应成功。"));
                getRes = this.GetRes(u, ownerObjectPath, true);
                if (getRes.GetResResult.Value >= 0)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期"));


                // 用GetRes()获取
                this.displayLine(GetBR() + getBold(u.UserName + "获取预约者是他人的预约到书xml，应失败。"));
                getRes = this.GetRes(u, otherArrivedPath, true);
                if (getRes.GetResResult.Value == -1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期"));

                // 用GetRes()获取他人下的对象
                this.displayLine(GetBR() + getBold(u.UserName + "获取预约者是他人的预约到书的对象，应失败。"));
                getRes = this.GetRes(u, otherObjectPath, true);
                if (getRes.GetResResult.Value == -1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期"));

                #endregion

                #region 第4组测试：读者删除预约到书，应不可以

                this.displayLine(this.getLarge("第4组测试：读者删除预约到书"));


                // 删除预约者是自己的预约到书
                this.displayLine(GetBR() + getBold(u.UserName + "删除预约者是自己的预约到书xml，应成功。"));
                ret = this.DelXml(u, C_Type_Arrived,ownerArrivedPath, true);
                if (ret.Value ==0)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期，读者不可能删除预约者是自己的预约到书xml。"));

                // 删除预约者是他人的预约到书
                this.displayLine(GetBR() + getBold(u.UserName + "删除预约者是他人的预约到书xml，应失败。"));
                ret = this.DelXml(u, C_Type_Arrived, otherArrivedPath, true);
                if (ret.Value == -1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期，读者不能删除预约者是他人的预约到书xml。"));

                #endregion




            }
            catch (Exception e1)
            {
                MessageBox.Show(this, "读者身份获取预约到书-异常:" + e1.Message);
            }
            finally
            {
                this.EnableCtrls(true);
            }
        }


===
2023/2/27 

        // 订购
        private void button_readerLogin_order_Click(object sender, EventArgs e)
        {
            /*
            环境准备：       
            用管理员身份创建一个读者，拥有完整的订购权限。
            用管理员身份创建1条订购记录。

            ==
            读者应不能获取订购记录：
            1）读者不能获取订购xml,用getres,getorders,getiteminfo三种接口测试
            2) 读者不能获取订购object,用getres接口

            ==
            读者应不能新建/修改/删除 订购xml 和 对象。
            1）新建，writeres,setiteminfo
            2）修改，writeres,setiteminfo
            3）删除，writeres,setiteminfo
 */

            this.EnableCtrls(false);
            try
            {
                // 清空输出
                ClearResult();

                WriteResResponse writeResponse = null;
                GetResResponse getResponse = null;
                LibraryServerResult result = null;

                // 用supervisor帐户创建一个读者，有册的读权限，后面用此读者帐户操作
                this.displayLine(this.getLarge("用管理员身份创建一个读者，有完整的订购信息，后面用此读者帐户操作"));
                string readerBarcode = "";
                writeResponse = this.CreateReaderBySuperviosr("setorderinfo,getorderinfo,writeorderobject,getorderobject",
                    "",  //个人书斋
                    out readerBarcode);
                if (writeResponse.WriteResResult.Value == -1)
                    throw new Exception("管理员创建读者异常：" + writeResponse.WriteResResult.ErrorInfo);
                string readerOwnerPath = writeResponse.strOutputResPath;

                // 修改读者的密码
                this.displayLine(this.getBold("修改读者" + readerBarcode + "的密码，后面用此读者身份登录。"));
                this.ChangeReaderPasswordBySupervisor(readerBarcode);
                UserInfo u = new UserInfo
                {
                    UserName = readerBarcode,
                    Password = "1",
                };
                

                // 用supervisor创建一条订购记录
                string newPath = this.GetAppendPath(C_Type_order);
                string orderPath = "";
                writeResponse = this.WriteXml(this.mainForm.GetSupervisorAccount(),
                     newPath,
                     GetXml(C_Type_order, true));
                if (writeResponse.WriteResResult.Value == -1)
                    throw new Exception("管理员创建订购记录异常：" + writeResponse.WriteResResult.ErrorInfo);
                orderPath = writeResponse.strOutputResPath;
                string orderObjectPath = orderPath + "/object/0";

                // 书目记录
                string biblioPath=GetBiblioPath();




                #region 第1组测试：读者获取订购记录

                this.displayLine(this.getLarge("第1组测试：读者获取订购记录"));

                //用 GetRes 获取
                this.displayLine(GetBR() + getBold(u.UserName + "用 GetRes 获取订购xml，应失败。"));
                getResponse = this.GetRes(u, orderPath, true);
                if (getResponse.GetResResult.Value == -1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期"));


                // 用 GetItemInfo 获取
                this.displayLine(GetBR() + getBold(u.UserName + "用 GetItemInfo 获取订购xml，应失败。"));
                GetItemInfoResponse getItemResponse = this.GetItemInfo(u, C_Type_order, orderPath,true);
                if (getItemResponse.GetItemInfoResult.Value ==-1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期"));

                // 用 GetOrders 获取
                this.displayLine(GetBR() + getBold(u.UserName + "用 GetOrders 获取订购xml，应失败。"));
                 result = this.GetFirstEntity(u, C_Type_order,biblioPath,out EntityInfo entity, true);
                if (result.Value == -1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期"));


                //用 GetRes 获取 订购下的对象
                this.displayLine(GetBR() + getBold(u.UserName + "用 GetRes 获取订购的对象，应失败。"));
                getResponse = this.GetRes(u, orderObjectPath, true);
                if (getResponse.GetResResult.Value == -1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期"));

                #endregion

                #region 第2组测试：读者创建订购记录

                string ownerOrderPath = "";

                this.displayLine(GetBR() + getBold(u.UserName + "用 WriteRes 创建订购xml，应失败。"));
                writeResponse = this.WriteXml(u,
                     newPath,
                     GetXml(C_Type_order, true),true);
                if (writeResponse.WriteResResult.Value == -1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期，读者应不能创建订购记录。"));

                ownerOrderPath = writeResponse.strOutputResPath;
                string ownerObjectPath = orderPath + "/object/0";

                // 用 SetItemInfo 创建
                this.displayLine(GetBR() + getBold(u.UserName + "用 SetItemInfo 创建订购xml，应失败。"));
                result = this.SetItemInfo(u,
                    "order",
                    "new",
                    newPath,
                   GetXml(C_Type_order, true),
                   true,
                   out ownerObjectPath);
                if(result.Value == -1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期，读者应不能创建订购记录。"));

                #endregion


                #region 第2组测试：读者修改订购记录

                // 修改订购xml
                this.displayLine(GetBR() + getBold(u.UserName + "用 WriteRes 修改订购xml，应失败。"));
                writeResponse = this.WriteXml(u,
                     orderPath,
                     GetXml(C_Type_order, true), true);
                if (writeResponse.WriteResResult.Value == -1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期，读者应不能修改订购xml。"));

                // 用 SetItemInfo 修改
                this.displayLine(GetBR() + getBold(u.UserName + "用 SetItemInfo 修改订购xml，应失败。"));
                result = this.SetItemInfo(u,
                    "order",
                    "change",
                    orderPath,
                   GetXml(C_Type_order, true),
                   true,
                   out string tempPath);
                if (result.Value == -1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期，读者应不能修改订购记录。"));


                // 修改订购object
                this.displayLine(GetBR() + getBold(u.UserName + "用 WriteRes 修改订购对象，应失败。"));
                writeResponse = this.WriteObject(u,
                     orderObjectPath, true);
                if (writeResponse.WriteResResult.Value == -1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期，读者应不能修改订购的对象。"));


                #endregion


                #region 第3组测试：读者删除订购记录

                // 删除订购xml
                this.displayLine(GetBR() + getBold(u.UserName + "用 WriteRes 删除订购xml，应失败。"));
                writeResponse = this.WriteResForDel(u,
                     orderPath,
                      true);
                if (writeResponse.WriteResResult.Value == -1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期，读者应不能删除订购xml。"));


                // 用 SetItemInfo 删除
                this.displayLine(GetBR() + getBold(u.UserName + "用 SetItemInfo 删除订购xml，应失败。"));
                result = this.SetItemInfo(u,
                    "order",
                    "delete",
                    orderPath,
                   "",
                   true,
                   out string temp2);
                if (result.Value == -1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期，读者应不能删除订购记录。"));

                #endregion

            }
            catch (Exception e1)
            {
                MessageBox.Show(this, "读者身份获取册-异常:" + e1.Message);
            }
            finally
            {
                this.EnableCtrls(true);
            }
        }

===
            this.EnableCtrls(false);
            try
            {
                // 清空输出
                ClearResult();

                this.displayLine(getLarge("读者及下级对象所需权限的测试结果"));


                string strResPath = "读者/?";
                WriteResResponse response = null;

                // 有用的读者xml路径
                string path_xmlHasFile = "";
                string path_object = "";

                #region 第1组测试  仅有setreaderinfo

                //===
                this.displayLine(getLarge("第1组测试"));
                // 仅有setreaderinfo
                UserInfo u = new UserInfo
                {
                    UserName = "r1",
                    Password = "1",
                    SetPassword = true,
                    Rights = "setreaderinfo",
                    Access = ""
                };
                //创建帐号
                this.NewUser(u);

                this.displayLine(GetBR() + getBold(u.UserName+"写简单xml，由于没有连带的读xml权限，应不成功。"));
                response = this.WriteXml(u, strResPath, this.GetReaderXml(false));
                if (response.WriteResResult.Value == -1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期，应拒绝，提示权限不够。"));

                //删除帐号
                this.DelUser(u);

                #endregion


                #region 第2组测试 setreaderinfo, getreaderinfo

                //===
                this.displayLine(getLarge("第2组测试"));
                //setreaderinfo, getreaderinfo
                //可写简单读者xml，包括add/new/delete
                //不可操作xml中dprms:file，不能写对象
                u = new UserInfo
                {
                    UserName = "r2",
                    Password = "1",
                    SetPassword = true,
                    Rights = "setreaderinfo,getreaderinfo",
                    Access = ""
                };
                //创建帐号
                this.NewUser(u);  

                // 新建简单xml
                this.displayLine(GetBR() + getBold(u.UserName+"新建简单xml，有读写xml权限，应新建成功。"));
                response = this.WriteXml(u, strResPath, this.GetReaderXml(false));
                if (response.WriteResResult.Value == 0)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期"));

                string tempPath = response.strOutputResPath;

                // 修改简单xml
                this.displayLine(GetBR() + getBold(u.UserName+"修改简单xml，应修改成功，且错误码应为NoError。"));
                response = this.WriteXml(u, tempPath, this.GetReaderXml(false));
                if (response.WriteResResult.Value == 0)
                {
                    if (response.WriteResResult.ErrorCode != ErrorCode.NoError)
                    {
                        this.displayLine(getRed("不符合预期，错误码不对，应为NoError。"));
                    }
                    else
                    {
                        this.displayLine("符合预期");
                    }
                }
                else
                    this.displayLine(getRed("不符合预期"));

                // 删除简单xml
                this.displayLine(GetBR() + getBold(u.UserName+"删除简单xml，应删除成功。"));
                SetReaderInfoResponse res = this.DelReader(u, tempPath);
                if (res.SetReaderInfoResult.Value == 0)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期"));



                // 不可操作xml中的dprms:file
                this.displayLine(GetBR() + getBold(u.UserName+"新建带dprms:file的xml，由于没有对象权限，应写入失败 或者 部分写入且过滤了file(注意观察提示)。"));
                response = this.WriteXml(u, strResPath, this.GetReaderXml(true));
                if (response.WriteResResult.Value == -1)
                    this.displayLine("符合预期");
                else
                {
                    if (response.WriteResResult.ErrorCode == ErrorCode.NoError)
                    {
                        this.displayLine(getRed("不符合预期，错误码应为部分写入。"));
                    }
                    else
                    {
                        this.displayLine("符合预期");
                    }

                }
                path_xmlHasFile = response.strOutputResPath;
                path_object = path_xmlHasFile + "/object/0";

                // 不能写对象
                this.displayLine(GetBR() + getBold(u.UserName+"写对象数据，由于没有对象权限，应不能成功。"));
                response = this.WriteObject(u, path_object);
                if (response.WriteResResult.Value == -1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期"));

                // 删除帐号
                this.DelUser(u);

                #endregion


                #region 第3组测试  setreaderinfo,getreaderinfo,writereaderobject

                //===
                this.displayLine(getLarge("第3组测试"));
                // setreaderinfo,getreaderinfo,writereaderobject
                // 效果同r1_2
                u = new UserInfo
                {
                    UserName = "r3",
                    Password = "1",
                    SetPassword = true,
                    //同r2效果，不能操作xml中的dprms:file，也不写对象，因为写对象首先需要getreaderobject。
                    Rights = "setreaderinfo,getreaderinfo,writereaderobject",
                    Access = ""
                };
                //创建帐号
                this.NewUser(u);

                // 无法写简单xml，因为写权限大于读者权限。
                this.displayLine(GetBR() + getBold(u.UserName+"新建简单xml，应报权限配置不合理，因为有写对象权限，缺读对象权限。"));
                response = this.WriteXml(u, strResPath, this.GetReaderXml(false));
                if (response.WriteResResult.Value == -1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期，应报权限配置违反规则。"));

                /*

                // 不可操作xml中的dprms:file
                this.displayLine(GetBR() + getBold(u.UserName+"新建带dprms:file的xml，由于没有连带的读对象权限，应不能成功，或者部分写入且过滤了file。"));
                response = this.WriteXml(u, strResPath, this.GetReaderXml(true));
                if (response.WriteResResult.Value == -1)
                    this.displayLine("符合预期");
                else
                {
                    if (response.WriteResResult.Value == 0 && response.WriteResResult.ErrorCode != ErrorCode.NoError)
                        this.displayLine("符合预期");
                    else
                        this.displayLine(getRed("不符合预期"));
                }
                path_xmlHasFile = response.strOutputResPath;
                path_object = path_xmlHasFile + "/object/0";

                // 不能写对象
                this.displayLine(GetBR() + getBold(u.UserName+"写对象，由于没有连带的读对象权限，应不能成功。"));
                response = this.WriteObject(u, path_object);
                if (response.WriteResResult.Value == -1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期"));
                */


                // 删除帐号
                this.DelUser(u);

                #endregion


                #region 第4组测试 setreaderinfo,getreaderinfo,writereaderobject,getreaderobject
                //===
                this.displayLine(getLarge("第4组测试"));
                // setreaderinfo,getreaderinfo,writereaderobject,getreaderobject
                // 这是完整权限，即可读xml及操作里面的dprms:file，又可以写对象。
                u = new UserInfo
                {
                    UserName = "r4",
                    Password = "1",
                    SetPassword = true,
                    Rights = "setreaderinfo,getreaderinfo,writereaderobject,getreaderobject",
                    Access = ""
                };
                //创建帐号
                this.NewUser(u);

                // 此case无意义，因为前面当有setreaderinfo,getreaderinfo，已测过对简单xml的增删改
                //// 写简单xml
                //this.displayLine(GetBR() + getBold(u.UserName+"新建简单xml，应新建成功。"));
                //response = this.WriteXml(u, strResPath, this.GetReaderXml(false));
                //if (response.WriteResResult.Value == 0)
                //    this.displayLine("符合预期");
                //else
                //    this.displayLine(getRed("不符合预期"));

                #region 对带dprms:file的xml的新建/修改/删除
                // 新建带file的xml
                this.displayLine(GetBR() + getBold(u.UserName+"新建带dprms:file的xml，应新建成功。"));
                response = this.WriteXml(u, strResPath, this.GetReaderXml(true));
                if (response.WriteResResult.Value == 0)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期"));

                // 下面针对上面新建的这条进行修改和删除
                tempPath = response.strOutputResPath; 

                // 修改带file的xml
                this.displayLine(GetBR() + getBold(u.UserName + "修改带dprms:file的xml，应修改成功且NoError。"));
                response = this.WriteXml(u, tempPath, this.GetReaderXml(true));
                if (response.WriteResResult.Value == 0)
                {
                    if (response.WriteResResult.ErrorCode != ErrorCode.NoError)
                        this.displayLine(getRed("不符合预期，错误码不对，应为NoError。"));
                    else
                        this.displayLine("符合预期");
                }
                else
                    this.displayLine(getRed("不符合预期"));

                // 删除带dprms:file的xml              
                this.displayLine(GetBR() + getBold(u.UserName + "删除带dprms:file的xml，应删除成功。"));
                res = this.DelReader(u, tempPath);
                if (res.SetReaderInfoResult.Value == 0)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期"));

                #endregion

                #region 修改xml中的dprms:file,包括对dprms:file的new/change/delete

                // 再新建一条带dprms:file的记录，以便对其下级的dprms:file进行增/删/改
                this.displayLine(GetBR() + getBold(u.UserName + "再新建一条带dprms:file的记录，以便对其下级的dprms:file进行增/删/改。"));

                string originXml = this.GetReaderXml(true);
                response = this.WriteXml(u, strResPath, originXml);
                if (response.WriteResResult.Value == 0)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期"));

                // 方便后面的帐户使用
                path_xmlHasFile = response.strOutputResPath;
                path_object = path_xmlHasFile + "/object/0";


                // 本次对这个路径的记录中dprms:file进行增删改
                tempPath = response.strOutputResPath;

                // 新增两个dprms:file
                this.displayLine(GetBR() + getBold(u.UserName + "对xml新增两个dprms:file，此时应有3个dprms:file"));
                string newFileXml = this.ChangeDprmsFile(originXml, "new");

                response = this.WriteXml(u, tempPath, newFileXml);
                if (response.WriteResResult.Value == 0)
                {
                    if (response.WriteResResult.ErrorCode != ErrorCode.NoError)
                        this.displayLine(getRed("注意错误码不对，应为NoError。"));

                    // 获取出来看下
                    GetResResponse tempResponse= this.GetRes(u,tempPath);
                    if (tempResponse.GetResResult.Value >= 0)
                    {
                        //tempResponse.
                        this.displayLine(this.getWarn1("请核对是否有3个dprms:file"));
                    }
                }
                else
                    this.displayLine(getRed("不符合预期"));

                // 修改第1个dprms:file
                this.displayLine(GetBR() + getBold(u.UserName + "对xml修改了第1个dprms:file，增加了a属性"));
                string changeFileXml = this.ChangeDprmsFile(newFileXml, "change");

                response = this.WriteXml(u, tempPath, changeFileXml);
                if (response.WriteResResult.Value == 0)
                {
                    if (response.WriteResResult.ErrorCode != ErrorCode.NoError)
                        this.displayLine(getRed("注意错误码不对，应为NoError。"));

                    // 获取出来看下
                    GetResResponse tempResponse = this.GetRes(u, tempPath);
                    if (tempResponse.GetResResult.Value >= 0)
                    {
                        //tempResponse.
                        this.displayLine(this.getWarn1("请核对第1个dprms:file是否增加了a属性"));
                    }
                }
                else
                    this.displayLine(getRed("不符合预期"));

                // 删除第3个dprms:file
                this.displayLine(GetBR() + getBold(u.UserName + "对xml删除第3个dprms:file，应成功"));
                string delFileXml = this.ChangeDprmsFile(changeFileXml, "delete");

                response = this.WriteXml(u, tempPath, delFileXml);
                if (response.WriteResResult.Value == 0)
                {
                    if (response.WriteResResult.ErrorCode != ErrorCode.NoError)
                        this.displayLine(getRed("注意错误码不对，应为NoError。"));

                    // 获取出来看下
                    GetResResponse tempResponse = this.GetRes(u, tempPath);
                    if (tempResponse.GetResResult.Value >= 0)
                    {
                        //tempResponse.
                        this.displayLine(this.getWarn1("请核对是否删除了第3个dprms:file"));
                    }
                }
                else
                    this.displayLine(getRed("不符合预期"));


                #endregion


                // 写对象
                this.displayLine(GetBR() + getBold(u.UserName+"写对象数据，应成功。"));
                response = this.WriteObject(u, path_object);
                if (response.WriteResResult.Value == 0)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期"));

                // 删除帐号
                this.DelUser(u);

                #endregion


                #region 第5组测试 writereaderobject

                //===
                this.displayLine(getLarge("第5组测试"));
                // writereaderobject
                // 不能操作xml中的dprms:file，也不能change对象数据，写对象需要先有读对象权限，且还需读写xml的权限
                u = new UserInfo
                {
                    UserName = "r5",
                    Password = "1",
                    SetPassword = true,
                    Rights = "writereaderobject",
                    Access = ""
                };
                //创建帐号
                this.NewUser(u);

                // 不可操作xml中的dprms:file
                this.displayLine(GetBR() + getBold(u.UserName+"写对象数据，由于没有连带的读对象权限 和 读写xml的权，应写不成功。"));
                response = this.WriteObject(u, path_object);
                if (response.WriteResResult.Value == -1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期"));

                // 删除帐号
                this.DelUser(u);

                #endregion


                #region 第6组测试  writereaderobject, getreaderobject

                //==
                this.displayLine(getLarge("第6组测试"));
                //writereaderobject, getreaderobject
                //不能修改对象数据，因为没有连带的读者xml权限
               u = new UserInfo
                {
                    UserName = "r6",
                    Password = "1",
                    SetPassword = true,

                    //能change对象数据，但不能操作xml中的dprms:file。
                    Rights = "writereaderobject, getreaderobject",
                    Access = ""
                };
                //创建帐号
                this.NewUser(u);

                this.displayLine(GetBR() + getBold(u.UserName+"修改对象数据，因为没有连带的读者xml权限，应不成功。"));
                response = this.WriteObject(u, path_object);
                if (response.WriteResResult.Value == -1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期"));

                // 修改xml及dprms:file,应不能成功。
                this.displayLine(GetBR() + getBold(u.UserName+"修改xml及dprms:file，由于没有读写xml的权限，应不成功。"));
                response = this.WriteXml(u, path_xmlHasFile, this.GetReaderXml(true));
                if (response.WriteResResult.Value == -1)
                    this.displayLine("符合预期");
                else
                    this.displayLine(getRed("不符合预期"));

                // 删除帐号
                this.DelUser(u);

                #endregion


                //=====以前为读权限=======

                #region 第7组测试 getreaderinfo

                //==
                this.displayLine(getLarge("第7组测试"));
                //getreaderinfo
                //仅能获取xml普通节点，不能获取对象。
                u = new UserInfo
                {
                    UserName = "r7",
                    Password = "1",
                    SetPassword = true,
                    Rights = "getreaderinfo",
                    Access = ""
                };
                //创建帐号
                this.NewUser(u);

                //可获取xml，须过滤了dprms:file
                this.displayLine(GetBR() + getBold(u.UserName+"获取xml，应获取成功，且须过滤了dprms:file。"));
                GetResResponse getResponse = this.GetRes(u, path_xmlHasFile);

                if (getResponse.GetResResult.Value >= 0)
                {
                    this.displayLine(getWarn1("请核对返回结果是否过滤了dprms:file。"));
                }
                else
                {
                    this.displayLine(getRed("不符合预期"));
                }

                //删除帐号
                this.DelUser(u);

                #endregion

                #region 第8组测试 getreaderinfo,getreaderobject

                //===
                this.displayLine(getLarge("第8组测试"));
                //getreaderinfo,getreaderobject
                //可读取xml且包含dprms:file，可获取对象
                u = new UserInfo
                {
                    UserName = "r8",
                    Password = "1",
                    SetPassword = true,
                    Rights = "getreaderinfo,getreaderobject",
                    Access = ""
                };
                //创建帐号
                this.NewUser(u);

                //可获取xml，须过滤了dprms:file
                this.displayLine(GetBR() + getBold(u.UserName+"获取xml，应获取成功，且包含dprms:file。"));
                 getResponse = this.GetRes(u, path_xmlHasFile);
                if (getResponse.GetResResult.Value >= 0)
                {
                    this.displayLine(getWarn1("请核对返回结果中应包含dprms:file。"));
                }
                else
                {
                    this.displayLine(getRed("不符合预期"));
                }

                //可获取对象
                this.displayLine(GetBR() + getBold(u.UserName+"获取对象，应获取成功。"));
                getResponse = this.GetRes(u, path_object);
                if (getResponse.GetResResult.Value >= 0)
                {
                    this.displayLine("符合预期");
                }
                else
                {
                    this.displayLine(getRed("不符合预期"));
                }

                //删除帐号
                this.DelUser(u);

                #endregion

                #region 第9组测试 getreaderobject

                //===
                this.displayLine(getLarge("第9组测试"));
                //getreaderobject，可获取对象，不可读xml
                u= new UserInfo
                {
                    UserName = "r9",
                    Password = "1",
                    SetPassword = true,
                    Rights = "getreaderobject",
                    Access = ""
                };

                //创建帐号
                this.NewUser(u);

                //不能获取对象
                this.displayLine(GetBR() + getBold("r9获取对象，应不成功，由于对象权限不能独立存在。"));
                getResponse = this.GetRes(u, path_object);
                if (getResponse.GetResResult.Value == -1)
                {
                    this.displayLine("符合预期");
                }
                else
                {
                    this.displayLine(getRed("不符合预期"));
                }

                //不能获取xml
                this.displayLine(GetBR() + getBold(u.UserName+"获取xml，由于没有读xml权限，应不成功。"));
                getResponse = this.GetRes(u, path_xmlHasFile);
                if (getResponse.GetResResult.Value ==-1)
                {
                    this.displayLine("符合预期");
                }
                else
                {
                    this.displayLine(getRed("不符合预期"));
                }

                //删除帐号
                this.DelUser(u);

                #endregion

            }
            catch (Exception ex)
            {

                MessageBox.Show(this, ex.Message);
            }
            finally
            {
                this.EnableCtrls(true);
            }